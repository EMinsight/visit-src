/*****************************************************************************
*
* Copyright (c) 2000 - 2009, Lawrence Livermore National Security, LLC
* Produced at the Lawrence Livermore National Laboratory
* LLNL-CODE-400124
* All rights reserved.
*
* This file is  part of VisIt. For  details, see https://visit.llnl.gov/.  The
* full copyright notice is contained in the file COPYRIGHT located at the root
* of the VisIt distribution or at http://www.llnl.gov/visit/copyright.html.
*
* Redistribution  and  use  in  source  and  binary  forms,  with  or  without
* modification, are permitted provided that the following conditions are met:
*
*  - Redistributions of  source code must  retain the above  copyright notice,
*    this list of conditions and the disclaimer below.
*  - Redistributions in binary form must reproduce the above copyright notice,
*    this  list of  conditions  and  the  disclaimer (as noted below)  in  the
*    documentation and/or other materials provided with the distribution.
*  - Neither the name of  the LLNS/LLNL nor the names of  its contributors may
*    be used to endorse or promote products derived from this software without
*    specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT  HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR  IMPLIED WARRANTIES, INCLUDING,  BUT NOT  LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND  FITNESS FOR A PARTICULAR  PURPOSE
* ARE  DISCLAIMED. IN  NO EVENT  SHALL LAWRENCE  LIVERMORE NATIONAL  SECURITY,
* LLC, THE  U.S.  DEPARTMENT OF  ENERGY  OR  CONTRIBUTORS BE  LIABLE  FOR  ANY
* DIRECT,  INDIRECT,   INCIDENTAL,   SPECIAL,   EXEMPLARY,  OR   CONSEQUENTIAL
* DAMAGES (INCLUDING, BUT NOT  LIMITED TO, PROCUREMENT OF  SUBSTITUTE GOODS OR
* SERVICES; LOSS OF  USE, DATA, OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER
* CAUSED  AND  ON  ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT
* LIABILITY, OR TORT  (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING IN ANY  WAY
* OUT OF THE  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
* DAMAGE.
*
*****************************************************************************/

#ifndef QVISPOINCAREPLOTWINDOW_H
#define QVISPOINCAREPLOTWINDOW_H

#include <QvisPostableWindowObserver.h>
#include <AttributeSubject.h>

class PoincareAttributes;
class QLabel;
class QCheckBox;
class QGroupBox;
class QLineEdit;
class QSpinBox;
class QVBox;
class QButtonGroup;
class QComboBox;
class QvisColorTableButton;
class QvisOpacitySlider;
class QvisColorButton;
class QvisLineStyleWidget;
class QvisLineWidthWidget;
class QvisVariableButton;

// ****************************************************************************
// Class: QvisPoincarePlotWindow
//
// Purpose:
//    Defines QvisPoincarePlotWindow class.
//
// Notes:      Autogenerated by xml2window.
//
// Programmer: xml2window
// Creation:   omitted
//
// Modifications:
//    Jeremy Meredith, Tue Apr 14 16:16:56 EDT 2009
//    Reworked and reorganized to make more usable.
//
//    Dave Pugmire, Fri Apr 17 11:32:40 EDT 2009
//    GUI reorganization.
//
//    Dave Pugmire, Tue Apr 28 09:26:06 EDT 2009
//    GUI reorganization.
//
//    Dave Pugmire, Tue Aug 11 10:33:05 EDT 2009
//    Add number of intersections termination criterion
//   
// ****************************************************************************

class QvisPoincarePlotWindow : public QvisPostableWindowObserver
{
    Q_OBJECT
  public:
    QvisPoincarePlotWindow(const int type,
                         PoincareAttributes *subj,
                         const QString &caption = QString::null,
                         const QString &shortName = QString::null,
                         QvisNotepadArea *notepad = 0);
    virtual ~QvisPoincarePlotWindow();
    virtual void CreateWindowContents();
  public slots:
    virtual void apply();
    virtual void makeDefault();
    virtual void reset();
  protected:
    void UpdateWindow(bool doAll);
    void GetCurrentValues(int which_widget);
    void Apply(bool ignore = false);
  private slots:
    void minPuncturesProcessText();
    void maxPuncturesProcessText();

    void sourceTypeChanged(int val);
    void pointSourceProcessText();
    void lineStartProcessText();
    void lineEndProcessText();
    void pointDensityChanged(int val);

    void integrationTypeChanged(int val);
    void maxStepLengthProcessText();
    void relTolProcessText();
    void absTolProcessText();


    void maxToroidalWindingSizeChanged(int val);
    void overrideToroidalWindingProcessText();
    void hitRateProcessText();
    void displayTypeChanged(int val);
    void adjustPlaneProcessText();
    void overlapsChanged(int val);

    void numberPlanesSizeChanged(int val);
    void colorByChanged(int val);
    void singleColorChanged(const QColor &color);
    void colorTableNameChanged(bool useDefault, const QString &ctName);
    void colorModeChanged(int val);

    void minToggled(bool on);
    void maxToggled(bool on);
    void processMaxLimitText();
    void processMinLimitText();

    void showIslandsChanged(bool val);
    void showLinesChanged(bool val);
    void showPointsChanged(bool val);

    void verboseFlagChanged(bool val);
    void legendFlagChanged(bool val);
    void lightingFlagChanged(bool val);
  private:
    int plotType;

    // streamline options
    QLineEdit *minPunctures;
    QLineEdit *maxPunctures;

    QComboBox *sourceType;
    QGroupBox *sourceAtts;
    QLineEdit *pointSource;
    QLineEdit *lineStart;
    QLineEdit *lineEnd;
    QSpinBox  *pointDensity;

    QComboBox *integrationType;
    QLineEdit *maxStepLength;
    QLineEdit *relTol;
    QLineEdit *absTol;

    // poincare options
    QSpinBox *MaxToroidalWinding;
    QLineEdit *OverrideToroidalWinding;
    QLineEdit *HitRate;
    QLineEdit *AdjustPlane;
    QButtonGroup *Overlaps;


    // display options
    QGroupBox *typeGrp;
    QGroupBox *limitsGrp;
    QGroupBox *colorGrp;
    QGroupBox *optionsGrp;

    QComboBox *DisplayType;
    QSpinBox *NumberPlanes;

    QButtonGroup *colorModeButtons;
    QvisColorTableButton *colorTableName;
    QvisColorButton *singleColor;
    QComboBox *ColorBy;

    QCheckBox *minToggle;
    QCheckBox *maxToggle;
    QLineEdit *maxLineEdit;
    QLineEdit *minLineEdit;

    QCheckBox *showIslands;
    QCheckBox *showLines;
    QCheckBox *showPoints;
    QCheckBox *verboseFlag;
    QCheckBox *legendFlag;
    QCheckBox *lightingFlag;

    // labels
    QLabel *minPuncturesLabel;
    QLabel *maxPuncturesLabel;
    QLabel *sourceTypeLabel;

    QLabel *pointSourceLabel;
    QLabel *lineStartLabel;
    QLabel *lineEndLabel;
    QLabel *pointDensityLabel;


    QLabel *integrationTypeLabel;
    QLabel *maxStepLengthLabel;
    QLabel *relTolLabel;
    QLabel *absTolLabel;

    QLabel *MaxToroidalWindingLabel;
    QLabel *OverrideToroidalWindingLabel;
    QLabel *HitRateLabel;
    QLabel *AdjustPlaneLabel;
    QLabel *OverlapsLabel;

    QLabel *DisplayTypeLabel;
    QLabel *NumberPlanesLabel;
    QLabel *ColorStyleLabel;
    QLabel *ColorByLabel;

    PoincareAttributes *atts;
};



#endif
